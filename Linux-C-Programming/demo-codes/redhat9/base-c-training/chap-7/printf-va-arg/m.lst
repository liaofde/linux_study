
hello:     file format elf32-i386

Disassembly of section .text:

08048278 <_start>:
 8048278:	31 ed                	xor    %ebp,%ebp
 804827a:	5e                   	pop    %esi
 804827b:	89 e1                	mov    %esp,%ecx
 804827d:	83 e4 f0             	and    $0xfffffff0,%esp
 8048280:	50                   	push   %eax
 8048281:	54                   	push   %esp
 8048282:	52                   	push   %edx
 8048283:	68 ac 84 04 08       	push   $0x80484ac
 8048288:	68 7c 84 04 08       	push   $0x804847c
 804828d:	51                   	push   %ecx
 804828e:	56                   	push   %esi
 804828f:	68 c0 83 04 08       	push   $0x80483c0
 8048294:	e8 bf ff ff ff       	call   8048258 <_init+0x28>
 8048299:	f4                   	hlt    
 804829a:	90                   	nop    
 804829b:	90                   	nop    

0804829c <call_gmon_start>:
 804829c:	55                   	push   %ebp
 804829d:	89 e5                	mov    %esp,%ebp
 804829f:	53                   	push   %ebx
 80482a0:	50                   	push   %eax
 80482a1:	e8 00 00 00 00       	call   80482a6 <call_gmon_start+0xa>
 80482a6:	5b                   	pop    %ebx
 80482a7:	81 c3 e6 13 00 00    	add    $0x13e6,%ebx
 80482ad:	8b 83 14 00 00 00    	mov    0x14(%ebx),%eax
 80482b3:	85 c0                	test   %eax,%eax
 80482b5:	74 02                	je     80482b9 <call_gmon_start+0x1d>
 80482b7:	ff d0                	call   *%eax
 80482b9:	8b 5d fc             	mov    0xfffffffc(%ebp),%ebx
 80482bc:	c9                   	leave  
 80482bd:	c3                   	ret    
 80482be:	90                   	nop    
 80482bf:	90                   	nop    

080482c0 <__do_global_dtors_aux>:
 80482c0:	55                   	push   %ebp
 80482c1:	89 e5                	mov    %esp,%ebp
 80482c3:	83 ec 08             	sub    $0x8,%esp
 80482c6:	80 3d a4 96 04 08 00 	cmpb   $0x0,0x80496a4
 80482cd:	75 29                	jne    80482f8 <__do_global_dtors_aux+0x38>
 80482cf:	a1 ac 95 04 08       	mov    0x80495ac,%eax
 80482d4:	8b 10                	mov    (%eax),%edx
 80482d6:	85 d2                	test   %edx,%edx
 80482d8:	74 17                	je     80482f1 <__do_global_dtors_aux+0x31>
 80482da:	89 f6                	mov    %esi,%esi
 80482dc:	83 c0 04             	add    $0x4,%eax
 80482df:	a3 ac 95 04 08       	mov    %eax,0x80495ac
 80482e4:	ff d2                	call   *%edx
 80482e6:	a1 ac 95 04 08       	mov    0x80495ac,%eax
 80482eb:	8b 10                	mov    (%eax),%edx
 80482ed:	85 d2                	test   %edx,%edx
 80482ef:	75 eb                	jne    80482dc <__do_global_dtors_aux+0x1c>
 80482f1:	c6 05 a4 96 04 08 01 	movb   $0x1,0x80496a4
 80482f8:	c9                   	leave  
 80482f9:	c3                   	ret    
 80482fa:	89 f6                	mov    %esi,%esi

080482fc <frame_dummy>:
 80482fc:	55                   	push   %ebp
 80482fd:	89 e5                	mov    %esp,%ebp
 80482ff:	83 ec 08             	sub    $0x8,%esp
 8048302:	a1 88 96 04 08       	mov    0x8049688,%eax
 8048307:	85 c0                	test   %eax,%eax
 8048309:	74 19                	je     8048324 <frame_dummy+0x28>
 804830b:	b8 00 00 00 00       	mov    $0x0,%eax
 8048310:	85 c0                	test   %eax,%eax
 8048312:	74 10                	je     8048324 <frame_dummy+0x28>
 8048314:	83 ec 0c             	sub    $0xc,%esp
 8048317:	68 88 96 04 08       	push   $0x8049688
 804831c:	e8 df 7c fb f7       	call   0 <_init-0x8048230>
 8048321:	83 c4 10             	add    $0x10,%esp
 8048324:	c9                   	leave  
 8048325:	c3                   	ret    
 8048326:	90                   	nop    
 8048327:	90                   	nop    

08048328 <myprintf>:

#include <stdarg.h>

void myprintf( char * fmt, ... )
{
 8048328:	55                   	push   %ebp
 8048329:	89 e5                	mov    %esp,%ebp
 804832b:	83 ec 08             	sub    $0x8,%esp
	va_list ap;
	int ival;

	va_start( ap, fmt );
 804832e:	8d 45 0c             	lea    0xc(%ebp),%eax
 8048331:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)

	ival = va_arg( ap, int );
 8048334:	8b 55 fc             	mov    0xfffffffc(%ebp),%edx
 8048337:	8d 45 fc             	lea    0xfffffffc(%ebp),%eax
 804833a:	83 00 04             	addl   $0x4,(%eax)
 804833d:	8b 02                	mov    (%edx),%eax
 804833f:	89 45 f8             	mov    %eax,0xfffffff8(%ebp)
	printf( "<myprintf> %s: %d \n", fmt, ival );
 8048342:	83 ec 04             	sub    $0x4,%esp
 8048345:	ff 75 f8             	pushl  0xfffffff8(%ebp)
 8048348:	ff 75 08             	pushl  0x8(%ebp)
 804834b:	68 28 85 04 08       	push   $0x8048528
 8048350:	e8 13 ff ff ff       	call   8048268 <_init+0x38>
 8048355:	83 c4 10             	add    $0x10,%esp

	va_end( ap );
}
 8048358:	c9                   	leave  
 8048359:	c3                   	ret    

0804835a <mymax>:

int mymax( int fmt, ... )
{
 804835a:	55                   	push   %ebp
 804835b:	89 e5                	mov    %esp,%ebp
 804835d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int i = 0;
 8048360:	c7 45 f8 00 00 00 00 	movl   $0x0,0xfffffff8(%ebp)
	int ival;
	int max = 0;
 8048367:	c7 45 f0 00 00 00 00 	movl   $0x0,0xfffffff0(%ebp)

	va_start( ap, fmt );
 804836e:	8d 45 0c             	lea    0xc(%ebp),%eax
 8048371:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)

	for( i=0; i<fmt; i++ )
 8048374:	c7 45 f8 00 00 00 00 	movl   $0x0,0xfffffff8(%ebp)
 804837b:	8b 45 f8             	mov    0xfffffff8(%ebp),%eax
 804837e:	3b 45 08             	cmp    0x8(%ebp),%eax
 8048381:	7c 02                	jl     8048385 <mymax+0x2b>
 8048383:	eb 36                	jmp    80483bb <mymax+0x61>
	{
		ival = va_arg( ap, int );
 8048385:	8b 55 fc             	mov    0xfffffffc(%ebp),%edx
 8048388:	8d 45 fc             	lea    0xfffffffc(%ebp),%eax
 804838b:	83 00 04             	addl   $0x4,(%eax)
 804838e:	8b 02                	mov    (%edx),%eax
 8048390:	89 45 f4             	mov    %eax,0xfffffff4(%ebp)
		printf( "<mymax> %d \n", ival );
 8048393:	83 ec 08             	sub    $0x8,%esp
 8048396:	ff 75 f4             	pushl  0xfffffff4(%ebp)
 8048399:	68 3c 85 04 08       	push   $0x804853c
 804839e:	e8 c5 fe ff ff       	call   8048268 <_init+0x38>
 80483a3:	83 c4 10             	add    $0x10,%esp
		if( ival > max )
 80483a6:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
 80483a9:	3b 45 f0             	cmp    0xfffffff0(%ebp),%eax
 80483ac:	7e 06                	jle    80483b4 <mymax+0x5a>
			max = ival;
 80483ae:	8b 45 f4             	mov    0xfffffff4(%ebp),%eax
 80483b1:	89 45 f0             	mov    %eax,0xfffffff0(%ebp)
 80483b4:	8d 45 f8             	lea    0xfffffff8(%ebp),%eax
 80483b7:	ff 00                	incl   (%eax)
 80483b9:	eb c0                	jmp    804837b <mymax+0x21>
	}

	va_end( ap );
	return max;
 80483bb:	8b 45 f0             	mov    0xfffffff0(%ebp),%eax
}
 80483be:	c9                   	leave  
 80483bf:	c3                   	ret    

080483c0 <main>:

#define 	PRINTF 	printf

int main( int argc, char * argv[] )
{
 80483c0:	55                   	push   %ebp
 80483c1:	89 e5                	mov    %esp,%ebp
 80483c3:	83 ec 08             	sub    $0x8,%esp
 80483c6:	83 e4 f0             	and    $0xfffffff0,%esp
 80483c9:	b8 00 00 00 00       	mov    $0x0,%eax
 80483ce:	29 c4                	sub    %eax,%esp
	int test = 123;
 80483d0:	c7 45 fc 7b 00 00 00 	movl   $0x7b,0xfffffffc(%ebp)

	printf( "hello, Cruel World! \n" );
 80483d7:	83 ec 0c             	sub    $0xc,%esp
 80483da:	68 49 85 04 08       	push   $0x8048549
 80483df:	e8 84 fe ff ff       	call   8048268 <_init+0x38>
 80483e4:	83 c4 10             	add    $0x10,%esp
//	printf( "-> %d %d %d \n", 12 );

	test = mymax( 2, 123, 456 );
 80483e7:	83 ec 04             	sub    $0x4,%esp
 80483ea:	68 c8 01 00 00       	push   $0x1c8
 80483ef:	6a 7b                	push   $0x7b
 80483f1:	6a 02                	push   $0x2
 80483f3:	e8 62 ff ff ff       	call   804835a <mymax>
 80483f8:	83 c4 10             	add    $0x10,%esp
 80483fb:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)
	printf( "max 2 number is %d \n", test );
 80483fe:	83 ec 08             	sub    $0x8,%esp
 8048401:	ff 75 fc             	pushl  0xfffffffc(%ebp)
 8048404:	68 5f 85 04 08       	push   $0x804855f
 8048409:	e8 5a fe ff ff       	call   8048268 <_init+0x38>
 804840e:	83 c4 10             	add    $0x10,%esp

	test = mymax( 3, -200, 700, 234 );
 8048411:	68 ea 00 00 00       	push   $0xea
 8048416:	68 bc 02 00 00       	push   $0x2bc
 804841b:	68 38 ff ff ff       	push   $0xffffff38
 8048420:	6a 03                	push   $0x3
 8048422:	e8 33 ff ff ff       	call   804835a <mymax>
 8048427:	83 c4 10             	add    $0x10,%esp
 804842a:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)
	printf( "max 3 number is %d \n", test );
 804842d:	83 ec 08             	sub    $0x8,%esp
 8048430:	ff 75 fc             	pushl  0xfffffffc(%ebp)
 8048433:	68 74 85 04 08       	push   $0x8048574
 8048438:	e8 2b fe ff ff       	call   8048268 <_init+0x38>
 804843d:	83 c4 10             	add    $0x10,%esp

	test = mymax( 4, 800, 400, 100, 200 );
 8048440:	83 ec 0c             	sub    $0xc,%esp
 8048443:	68 c8 00 00 00       	push   $0xc8
 8048448:	6a 64                	push   $0x64
 804844a:	68 90 01 00 00       	push   $0x190
 804844f:	68 20 03 00 00       	push   $0x320
 8048454:	6a 04                	push   $0x4
 8048456:	e8 ff fe ff ff       	call   804835a <mymax>
 804845b:	83 c4 20             	add    $0x20,%esp
 804845e:	89 45 fc             	mov    %eax,0xfffffffc(%ebp)
	printf( "max 4 number is %d \n", test );
 8048461:	83 ec 08             	sub    $0x8,%esp
 8048464:	ff 75 fc             	pushl  0xfffffffc(%ebp)
 8048467:	68 89 85 04 08       	push   $0x8048589
 804846c:	e8 f7 fd ff ff       	call   8048268 <_init+0x38>
 8048471:	83 c4 10             	add    $0x10,%esp

	return 0;
 8048474:	b8 00 00 00 00       	mov    $0x0,%eax
}
 8048479:	c9                   	leave  
 804847a:	c3                   	ret    
 804847b:	90                   	nop    

0804847c <__libc_csu_init>:
 804847c:	55                   	push   %ebp
 804847d:	89 e5                	mov    %esp,%ebp
 804847f:	56                   	push   %esi
 8048480:	53                   	push   %ebx
 8048481:	e8 aa fd ff ff       	call   8048230 <_init>
 8048486:	b8 a4 95 04 08       	mov    $0x80495a4,%eax
 804848b:	2d a4 95 04 08       	sub    $0x80495a4,%eax
 8048490:	c1 f8 02             	sar    $0x2,%eax
 8048493:	31 db                	xor    %ebx,%ebx
 8048495:	39 c3                	cmp    %eax,%ebx
 8048497:	73 0f                	jae    80484a8 <__libc_csu_init+0x2c>
 8048499:	89 c6                	mov    %eax,%esi
 804849b:	90                   	nop    
 804849c:	ff 14 9d a4 95 04 08 	call   *0x80495a4(,%ebx,4)
 80484a3:	43                   	inc    %ebx
 80484a4:	39 f3                	cmp    %esi,%ebx
 80484a6:	72 f4                	jb     804849c <__libc_csu_init+0x20>
 80484a8:	5b                   	pop    %ebx
 80484a9:	5e                   	pop    %esi
 80484aa:	c9                   	leave  
 80484ab:	c3                   	ret    

080484ac <__libc_csu_fini>:
 80484ac:	55                   	push   %ebp
 80484ad:	89 e5                	mov    %esp,%ebp
 80484af:	53                   	push   %ebx
 80484b0:	50                   	push   %eax
 80484b1:	b8 a4 95 04 08       	mov    $0x80495a4,%eax
 80484b6:	2d a4 95 04 08       	sub    $0x80495a4,%eax
 80484bb:	c1 f8 02             	sar    $0x2,%eax
 80484be:	85 c0                	test   %eax,%eax
 80484c0:	8d 58 ff             	lea    0xffffffff(%eax),%ebx
 80484c3:	75 0b                	jne    80484d0 <__libc_csu_fini+0x24>
 80484c5:	8b 5d fc             	mov    0xfffffffc(%ebp),%ebx
 80484c8:	c9                   	leave  
 80484c9:	e9 36 00 00 00       	jmp    8048504 <_fini>
 80484ce:	89 f6                	mov    %esi,%esi
 80484d0:	ff 14 9d a4 95 04 08 	call   *0x80495a4(,%ebx,4)
 80484d7:	89 da                	mov    %ebx,%edx
 80484d9:	4b                   	dec    %ebx
 80484da:	85 d2                	test   %edx,%edx
 80484dc:	75 f2                	jne    80484d0 <__libc_csu_fini+0x24>
 80484de:	eb e5                	jmp    80484c5 <__libc_csu_fini+0x19>

080484e0 <__do_global_ctors_aux>:
 80484e0:	55                   	push   %ebp
 80484e1:	89 e5                	mov    %esp,%ebp
 80484e3:	53                   	push   %ebx
 80484e4:	52                   	push   %edx
 80484e5:	a1 78 96 04 08       	mov    0x8049678,%eax
 80484ea:	83 f8 ff             	cmp    $0xffffffff,%eax
 80484ed:	bb 78 96 04 08       	mov    $0x8049678,%ebx
 80484f2:	74 0c                	je     8048500 <__do_global_ctors_aux+0x20>
 80484f4:	83 eb 04             	sub    $0x4,%ebx
 80484f7:	ff d0                	call   *%eax
 80484f9:	8b 03                	mov    (%ebx),%eax
 80484fb:	83 f8 ff             	cmp    $0xffffffff,%eax
 80484fe:	75 f4                	jne    80484f4 <__do_global_ctors_aux+0x14>
 8048500:	58                   	pop    %eax
 8048501:	5b                   	pop    %ebx
 8048502:	c9                   	leave  
 8048503:	c3                   	ret    

hello:     file format elf32-i386

Disassembly of section .rodata:

08048520 <_fp_hw>:
 8048520:	03 00 00 00                                         ....

08048524 <_IO_stdin_used>:
 8048524:	01 00 02 00 3c 6d 79 70 72 69 6e 74 66 3e 20 25     ....<myprintf> %
 8048534:	73 3a 20 25 64 20 0a 00 3c 6d 79 6d 61 78 3e 20     s: %d ..<mymax> 
 8048544:	25 64 20 0a 00 68 65 6c 6c 6f 2c 20 43 72 75 65     %d ..hello, Crue
 8048554:	6c 20 57 6f 72 6c 64 21 20 0a 00 6d 61 78 20 32     l World! ..max 2
 8048564:	20 6e 75 6d 62 65 72 20 69 73 20 25 64 20 0a 00      number is %d ..
 8048574:	6d 61 78 20 33 20 6e 75 6d 62 65 72 20 69 73 20     max 3 number is 
 8048584:	25 64 20 0a 00 6d 61 78 20 34 20 6e 75 6d 62 65     %d ..max 4 numbe
 8048594:	72 20 69 73 20 25 64 20 0a 00                       r is %d ..

hello:     file format elf32-i386

Disassembly of section .data:

080495a4 <__data_start>:
 80495a4:	00 00                	add    %al,(%eax)
	...

080495a8 <__dso_handle>:
 80495a8:	00 00 00 00                                         ....

080495ac <p.0>:
 80495ac:	84 96 04 08                                         ....
