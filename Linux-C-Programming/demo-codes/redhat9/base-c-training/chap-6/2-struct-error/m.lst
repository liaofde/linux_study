
hello:     file format elf32-i386

Disassembly of section .text:

080482e0 <_start>:
 80482e0:	31 ed                	xor    %ebp,%ebp
 80482e2:	5e                   	pop    %esi
 80482e3:	89 e1                	mov    %esp,%ecx
 80482e5:	83 e4 f0             	and    $0xfffffff0,%esp
 80482e8:	50                   	push   %eax
 80482e9:	54                   	push   %esp
 80482ea:	52                   	push   %edx
 80482eb:	68 c0 84 04 08       	push   $0x80484c0
 80482f0:	68 90 84 04 08       	push   $0x8048490
 80482f5:	51                   	push   %ecx
 80482f6:	56                   	push   %esi
 80482f7:	68 90 83 04 08       	push   $0x8048390
 80482fc:	e8 af ff ff ff       	call   80482b0 <_init+0x38>
 8048301:	f4                   	hlt    
 8048302:	90                   	nop    
 8048303:	90                   	nop    

08048304 <call_gmon_start>:
 8048304:	55                   	push   %ebp
 8048305:	89 e5                	mov    %esp,%ebp
 8048307:	53                   	push   %ebx
 8048308:	50                   	push   %eax
 8048309:	e8 00 00 00 00       	call   804830e <call_gmon_start+0xa>
 804830e:	5b                   	pop    %ebx
 804830f:	81 c3 6a 13 00 00    	add    $0x136a,%ebx
 8048315:	8b 83 1c 00 00 00    	mov    0x1c(%ebx),%eax
 804831b:	85 c0                	test   %eax,%eax
 804831d:	74 02                	je     8048321 <call_gmon_start+0x1d>
 804831f:	ff d0                	call   *%eax
 8048321:	8b 5d fc             	mov    0xfffffffc(%ebp),%ebx
 8048324:	c9                   	leave  
 8048325:	c3                   	ret    
 8048326:	90                   	nop    
 8048327:	90                   	nop    

08048328 <__do_global_dtors_aux>:
 8048328:	55                   	push   %ebp
 8048329:	89 e5                	mov    %esp,%ebp
 804832b:	83 ec 08             	sub    $0x8,%esp
 804832e:	80 3d 98 96 04 08 00 	cmpb   $0x0,0x8049698
 8048335:	75 29                	jne    8048360 <__do_global_dtors_aux+0x38>
 8048337:	a1 98 95 04 08       	mov    0x8049598,%eax
 804833c:	8b 10                	mov    (%eax),%edx
 804833e:	85 d2                	test   %edx,%edx
 8048340:	74 17                	je     8048359 <__do_global_dtors_aux+0x31>
 8048342:	89 f6                	mov    %esi,%esi
 8048344:	83 c0 04             	add    $0x4,%eax
 8048347:	a3 98 95 04 08       	mov    %eax,0x8049598
 804834c:	ff d2                	call   *%edx
 804834e:	a1 98 95 04 08       	mov    0x8049598,%eax
 8048353:	8b 10                	mov    (%eax),%edx
 8048355:	85 d2                	test   %edx,%edx
 8048357:	75 eb                	jne    8048344 <__do_global_dtors_aux+0x1c>
 8048359:	c6 05 98 96 04 08 01 	movb   $0x1,0x8049698
 8048360:	c9                   	leave  
 8048361:	c3                   	ret    
 8048362:	89 f6                	mov    %esi,%esi

08048364 <frame_dummy>:
 8048364:	55                   	push   %ebp
 8048365:	89 e5                	mov    %esp,%ebp
 8048367:	83 ec 08             	sub    $0x8,%esp
 804836a:	a1 74 96 04 08       	mov    0x8049674,%eax
 804836f:	85 c0                	test   %eax,%eax
 8048371:	74 19                	je     804838c <frame_dummy+0x28>
 8048373:	b8 00 00 00 00       	mov    $0x0,%eax
 8048378:	85 c0                	test   %eax,%eax
 804837a:	74 10                	je     804838c <frame_dummy+0x28>
 804837c:	83 ec 0c             	sub    $0xc,%esp
 804837f:	68 74 96 04 08       	push   $0x8049674
 8048384:	e8 77 7c fb f7       	call   0 <_init-0x8048278>
 8048389:	83 c4 10             	add    $0x10,%esp
 804838c:	c9                   	leave  
 804838d:	c3                   	ret    
 804838e:	90                   	nop    
 804838f:	90                   	nop    

08048390 <main>:
char str[10];
char * pstr;

int main( int argc, char * argv[] )
{
 8048390:	55                   	push   %ebp
 8048391:	89 e5                	mov    %esp,%ebp
 8048393:	83 ec 08             	sub    $0x8,%esp
 8048396:	83 e4 f0             	and    $0xfffffff0,%esp
 8048399:	b8 00 00 00 00       	mov    $0x0,%eax
 804839e:	29 c4                	sub    %eax,%esp
	printf( "hello, Cruel World! \n" );
 80483a0:	83 ec 0c             	sub    $0xc,%esp
 80483a3:	68 3c 85 04 08       	push   $0x804853c
 80483a8:	e8 13 ff ff ff       	call   80482c0 <_init+0x48>
 80483ad:	83 c4 10             	add    $0x10,%esp
	p = &a;
 80483b0:	c7 05 9c 96 04 08 b4 	movl   $0x80496b4,0x804969c
 80483b7:	96 04 08 
	pp = &a;
 80483ba:	c7 05 a0 96 04 08 b4 	movl   $0x80496b4,0x80496a0
 80483c1:	96 04 08 

	p->len = 10;
 80483c4:	a1 9c 96 04 08       	mov    0x804969c,%eax
 80483c9:	c7 40 08 0a 00 00 00 	movl   $0xa,0x8(%eax)
	printf( "p->len = %d \n", p->len );
 80483d0:	83 ec 08             	sub    $0x8,%esp
 80483d3:	a1 9c 96 04 08       	mov    0x804969c,%eax
 80483d8:	ff 70 08             	pushl  0x8(%eax)
 80483db:	68 52 85 04 08       	push   $0x8048552
 80483e0:	e8 db fe ff ff       	call   80482c0 <_init+0x48>
 80483e5:	83 c4 10             	add    $0x10,%esp
//	strcpy( p->str, "aabb" );

	pstr = (char *) malloc( 10 );
 80483e8:	83 ec 0c             	sub    $0xc,%esp
 80483eb:	6a 0a                	push   $0xa
 80483ed:	e8 ae fe ff ff       	call   80482a0 <_init+0x28>
 80483f2:	83 c4 10             	add    $0x10,%esp
 80483f5:	a3 a4 96 04 08       	mov    %eax,0x80496a4
	p->str = pstr;	
 80483fa:	8b 15 9c 96 04 08    	mov    0x804969c,%edx
 8048400:	a1 a4 96 04 08       	mov    0x80496a4,%eax
 8048405:	89 42 0c             	mov    %eax,0xc(%edx)
	strcpy( p->str, "zhangsan" );
 8048408:	83 ec 08             	sub    $0x8,%esp
 804840b:	68 60 85 04 08       	push   $0x8048560
 8048410:	a1 9c 96 04 08       	mov    0x804969c,%eax
 8048415:	ff 70 0c             	pushl  0xc(%eax)
 8048418:	e8 b3 fe ff ff       	call   80482d0 <_init+0x58>
 804841d:	83 c4 10             	add    $0x10,%esp
	
	pstr = (char *) malloc( 10 );
 8048420:	83 ec 0c             	sub    $0xc,%esp
 8048423:	6a 0a                	push   $0xa
 8048425:	e8 76 fe ff ff       	call   80482a0 <_init+0x28>
 804842a:	83 c4 10             	add    $0x10,%esp
 804842d:	a3 a4 96 04 08       	mov    %eax,0x80496a4
	pp->str = pstr;
 8048432:	8b 15 a0 96 04 08    	mov    0x80496a0,%edx
 8048438:	a1 a4 96 04 08       	mov    0x80496a4,%eax
 804843d:	89 42 0c             	mov    %eax,0xc(%edx)
	strcpy( pp->str, "lisi" );
 8048440:	83 ec 08             	sub    $0x8,%esp
 8048443:	68 69 85 04 08       	push   $0x8048569
 8048448:	a1 a0 96 04 08       	mov    0x80496a0,%eax
 804844d:	ff 70 0c             	pushl  0xc(%eax)
 8048450:	e8 7b fe ff ff       	call   80482d0 <_init+0x58>
 8048455:	83 c4 10             	add    $0x10,%esp

	printf( "p->str = %s \n", p->str );
 8048458:	83 ec 08             	sub    $0x8,%esp
 804845b:	a1 9c 96 04 08       	mov    0x804969c,%eax
 8048460:	ff 70 0c             	pushl  0xc(%eax)
 8048463:	68 6e 85 04 08       	push   $0x804856e
 8048468:	e8 53 fe ff ff       	call   80482c0 <_init+0x48>
 804846d:	83 c4 10             	add    $0x10,%esp
	printf( "pp->str = %s \n", pp->str );
 8048470:	83 ec 08             	sub    $0x8,%esp
 8048473:	a1 a0 96 04 08       	mov    0x80496a0,%eax
 8048478:	ff 70 0c             	pushl  0xc(%eax)
 804847b:	68 7c 85 04 08       	push   $0x804857c
 8048480:	e8 3b fe ff ff       	call   80482c0 <_init+0x48>
 8048485:	83 c4 10             	add    $0x10,%esp
	return 0;
 8048488:	b8 00 00 00 00       	mov    $0x0,%eax
}
 804848d:	c9                   	leave  
 804848e:	c3                   	ret    
 804848f:	90                   	nop    

08048490 <__libc_csu_init>:
 8048490:	55                   	push   %ebp
 8048491:	89 e5                	mov    %esp,%ebp
 8048493:	56                   	push   %esi
 8048494:	53                   	push   %ebx
 8048495:	e8 de fd ff ff       	call   8048278 <_init>
 804849a:	b8 90 95 04 08       	mov    $0x8049590,%eax
 804849f:	2d 90 95 04 08       	sub    $0x8049590,%eax
 80484a4:	c1 f8 02             	sar    $0x2,%eax
 80484a7:	31 db                	xor    %ebx,%ebx
 80484a9:	39 c3                	cmp    %eax,%ebx
 80484ab:	73 0f                	jae    80484bc <__libc_csu_init+0x2c>
 80484ad:	89 c6                	mov    %eax,%esi
 80484af:	90                   	nop    
 80484b0:	ff 14 9d 90 95 04 08 	call   *0x8049590(,%ebx,4)
 80484b7:	43                   	inc    %ebx
 80484b8:	39 f3                	cmp    %esi,%ebx
 80484ba:	72 f4                	jb     80484b0 <__libc_csu_init+0x20>
 80484bc:	5b                   	pop    %ebx
 80484bd:	5e                   	pop    %esi
 80484be:	c9                   	leave  
 80484bf:	c3                   	ret    

080484c0 <__libc_csu_fini>:
 80484c0:	55                   	push   %ebp
 80484c1:	89 e5                	mov    %esp,%ebp
 80484c3:	53                   	push   %ebx
 80484c4:	50                   	push   %eax
 80484c5:	b8 90 95 04 08       	mov    $0x8049590,%eax
 80484ca:	2d 90 95 04 08       	sub    $0x8049590,%eax
 80484cf:	c1 f8 02             	sar    $0x2,%eax
 80484d2:	85 c0                	test   %eax,%eax
 80484d4:	8d 58 ff             	lea    0xffffffff(%eax),%ebx
 80484d7:	75 0b                	jne    80484e4 <__libc_csu_fini+0x24>
 80484d9:	8b 5d fc             	mov    0xfffffffc(%ebp),%ebx
 80484dc:	c9                   	leave  
 80484dd:	e9 36 00 00 00       	jmp    8048518 <_fini>
 80484e2:	89 f6                	mov    %esi,%esi
 80484e4:	ff 14 9d 90 95 04 08 	call   *0x8049590(,%ebx,4)
 80484eb:	89 da                	mov    %ebx,%edx
 80484ed:	4b                   	dec    %ebx
 80484ee:	85 d2                	test   %edx,%edx
 80484f0:	75 f2                	jne    80484e4 <__libc_csu_fini+0x24>
 80484f2:	eb e5                	jmp    80484d9 <__libc_csu_fini+0x19>

080484f4 <__do_global_ctors_aux>:
 80484f4:	55                   	push   %ebp
 80484f5:	89 e5                	mov    %esp,%ebp
 80484f7:	53                   	push   %ebx
 80484f8:	52                   	push   %edx
 80484f9:	a1 64 96 04 08       	mov    0x8049664,%eax
 80484fe:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048501:	bb 64 96 04 08       	mov    $0x8049664,%ebx
 8048506:	74 0c                	je     8048514 <__do_global_ctors_aux+0x20>
 8048508:	83 eb 04             	sub    $0x4,%ebx
 804850b:	ff d0                	call   *%eax
 804850d:	8b 03                	mov    (%ebx),%eax
 804850f:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048512:	75 f4                	jne    8048508 <__do_global_ctors_aux+0x14>
 8048514:	58                   	pop    %eax
 8048515:	5b                   	pop    %ebx
 8048516:	c9                   	leave  
 8048517:	c3                   	ret    

hello:     file format elf32-i386

Disassembly of section .rodata:

08048534 <_fp_hw>:
 8048534:	03 00 00 00                                         ....

08048538 <_IO_stdin_used>:
 8048538:	01 00 02 00 68 65 6c 6c 6f 2c 20 43 72 75 65 6c     ....hello, Cruel
 8048548:	20 57 6f 72 6c 64 21 20 0a 00 70 2d 3e 6c 65 6e      World! ..p->len
 8048558:	20 3d 20 25 64 20 0a 00 7a 68 61 6e 67 73 61 6e      = %d ..zhangsan
 8048568:	00 6c 69 73 69 00 70 2d 3e 73 74 72 20 3d 20 25     .lisi.p->str = %
 8048578:	73 20 0a 00 70 70 2d 3e 73 74 72 20 3d 20 25 73     s ..pp->str = %s
 8048588:	20 0a 00                                             ..

hello:     file format elf32-i386

Disassembly of section .data:

08049590 <__data_start>:
 8049590:	00 00                	add    %al,(%eax)
	...

08049594 <__dso_handle>:
 8049594:	00 00 00 00                                         ....

08049598 <p.0>:
 8049598:	70 96 04 08                                         p...

hello:     file format elf32-i386

