
hello:     file format elf32-i386

Disassembly of section .text:

08048278 <_start>:
 8048278:	31 ed                	xor    %ebp,%ebp
 804827a:	5e                   	pop    %esi
 804827b:	89 e1                	mov    %esp,%ecx
 804827d:	83 e4 f0             	and    $0xfffffff0,%esp
 8048280:	50                   	push   %eax
 8048281:	54                   	push   %esp
 8048282:	52                   	push   %edx
 8048283:	68 d4 83 04 08       	push   $0x80483d4
 8048288:	68 a4 83 04 08       	push   $0x80483a4
 804828d:	51                   	push   %ecx
 804828e:	56                   	push   %esi
 804828f:	68 28 83 04 08       	push   $0x8048328
 8048294:	e8 bf ff ff ff       	call   8048258 <_init+0x28>
 8048299:	f4                   	hlt    
 804829a:	90                   	nop    
 804829b:	90                   	nop    

0804829c <call_gmon_start>:
 804829c:	55                   	push   %ebp
 804829d:	89 e5                	mov    %esp,%ebp
 804829f:	53                   	push   %ebx
 80482a0:	50                   	push   %eax
 80482a1:	e8 00 00 00 00       	call   80482a6 <call_gmon_start+0xa>
 80482a6:	5b                   	pop    %ebx
 80482a7:	81 c3 d2 12 00 00    	add    $0x12d2,%ebx
 80482ad:	8b 83 14 00 00 00    	mov    0x14(%ebx),%eax
 80482b3:	85 c0                	test   %eax,%eax
 80482b5:	74 02                	je     80482b9 <call_gmon_start+0x1d>
 80482b7:	ff d0                	call   *%eax
 80482b9:	8b 5d fc             	mov    0xfffffffc(%ebp),%ebx
 80482bc:	c9                   	leave  
 80482bd:	c3                   	ret    
 80482be:	90                   	nop    
 80482bf:	90                   	nop    

080482c0 <__do_global_dtors_aux>:
 80482c0:	55                   	push   %ebp
 80482c1:	89 e5                	mov    %esp,%ebp
 80482c3:	83 ec 08             	sub    $0x8,%esp
 80482c6:	80 3d 90 95 04 08 00 	cmpb   $0x0,0x8049590
 80482cd:	75 29                	jne    80482f8 <__do_global_dtors_aux+0x38>
 80482cf:	a1 98 94 04 08       	mov    0x8049498,%eax
 80482d4:	8b 10                	mov    (%eax),%edx
 80482d6:	85 d2                	test   %edx,%edx
 80482d8:	74 17                	je     80482f1 <__do_global_dtors_aux+0x31>
 80482da:	89 f6                	mov    %esi,%esi
 80482dc:	83 c0 04             	add    $0x4,%eax
 80482df:	a3 98 94 04 08       	mov    %eax,0x8049498
 80482e4:	ff d2                	call   *%edx
 80482e6:	a1 98 94 04 08       	mov    0x8049498,%eax
 80482eb:	8b 10                	mov    (%eax),%edx
 80482ed:	85 d2                	test   %edx,%edx
 80482ef:	75 eb                	jne    80482dc <__do_global_dtors_aux+0x1c>
 80482f1:	c6 05 90 95 04 08 01 	movb   $0x1,0x8049590
 80482f8:	c9                   	leave  
 80482f9:	c3                   	ret    
 80482fa:	89 f6                	mov    %esi,%esi

080482fc <frame_dummy>:
 80482fc:	55                   	push   %ebp
 80482fd:	89 e5                	mov    %esp,%ebp
 80482ff:	83 ec 08             	sub    $0x8,%esp
 8048302:	a1 74 95 04 08       	mov    0x8049574,%eax
 8048307:	85 c0                	test   %eax,%eax
 8048309:	74 19                	je     8048324 <frame_dummy+0x28>
 804830b:	b8 00 00 00 00       	mov    $0x0,%eax
 8048310:	85 c0                	test   %eax,%eax
 8048312:	74 10                	je     8048324 <frame_dummy+0x28>
 8048314:	83 ec 0c             	sub    $0xc,%esp
 8048317:	68 74 95 04 08       	push   $0x8049574
 804831c:	e8 df 7c fb f7       	call   0 <_init-0x8048230>
 8048321:	83 c4 10             	add    $0x10,%esp
 8048324:	c9                   	leave  
 8048325:	c3                   	ret    
 8048326:	90                   	nop    
 8048327:	90                   	nop    

08048328 <main>:
	unsigned int is_highest : 30;
} flags;

int main( int argc, char * argv[] )
{
 8048328:	55                   	push   %ebp
 8048329:	89 e5                	mov    %esp,%ebp
 804832b:	83 ec 08             	sub    $0x8,%esp
 804832e:	83 e4 f0             	and    $0xfffffff0,%esp
 8048331:	b8 00 00 00 00       	mov    $0x0,%eax
 8048336:	29 c4                	sub    %eax,%esp
	printf( "hello, Cruel World! \n" );
 8048338:	83 ec 0c             	sub    $0xc,%esp
 804833b:	68 50 84 04 08       	push   $0x8048450
 8048340:	e8 23 ff ff ff       	call   8048268 <_init+0x38>
 8048345:	83 c4 10             	add    $0x10,%esp

	flags.is_keyword = 1;
 8048348:	80 0d 94 95 04 08 01 	orb    $0x1,0x8049594
	flags.is_extern = 1;
 804834f:	80 0d 94 95 04 08 02 	orb    $0x2,0x8049594
	flags.is_high = 1;
 8048356:	80 0d 94 95 04 08 80 	orb    $0x80,0x8049594

	flags.is_mid = 2;
 804835d:	a0 94 95 04 08       	mov    0x8049594,%al
 8048362:	83 e0 87             	and    $0xffffff87,%eax
 8048365:	83 c8 10             	or     $0x10,%eax
 8048368:	a2 94 95 04 08       	mov    %al,0x8049594

	printf( "flags = 0x%x \n", flags );
 804836d:	83 ec 04             	sub    $0x4,%esp
 8048370:	ff 35 98 95 04 08    	pushl  0x8049598
 8048376:	ff 35 94 95 04 08    	pushl  0x8049594
 804837c:	68 66 84 04 08       	push   $0x8048466
 8048381:	e8 e2 fe ff ff       	call   8048268 <_init+0x38>
 8048386:	83 c4 10             	add    $0x10,%esp
	printf( "sizeof flags = 0x%x \n",sizeof(flags) );
 8048389:	83 ec 08             	sub    $0x8,%esp
 804838c:	6a 08                	push   $0x8
 804838e:	68 75 84 04 08       	push   $0x8048475
 8048393:	e8 d0 fe ff ff       	call   8048268 <_init+0x38>
 8048398:	83 c4 10             	add    $0x10,%esp

	return 0;
 804839b:	b8 00 00 00 00       	mov    $0x0,%eax
}
 80483a0:	c9                   	leave  
 80483a1:	c3                   	ret    
 80483a2:	90                   	nop    
 80483a3:	90                   	nop    

080483a4 <__libc_csu_init>:
 80483a4:	55                   	push   %ebp
 80483a5:	89 e5                	mov    %esp,%ebp
 80483a7:	56                   	push   %esi
 80483a8:	53                   	push   %ebx
 80483a9:	e8 82 fe ff ff       	call   8048230 <_init>
 80483ae:	b8 90 94 04 08       	mov    $0x8049490,%eax
 80483b3:	2d 90 94 04 08       	sub    $0x8049490,%eax
 80483b8:	c1 f8 02             	sar    $0x2,%eax
 80483bb:	31 db                	xor    %ebx,%ebx
 80483bd:	39 c3                	cmp    %eax,%ebx
 80483bf:	73 0f                	jae    80483d0 <__libc_csu_init+0x2c>
 80483c1:	89 c6                	mov    %eax,%esi
 80483c3:	90                   	nop    
 80483c4:	ff 14 9d 90 94 04 08 	call   *0x8049490(,%ebx,4)
 80483cb:	43                   	inc    %ebx
 80483cc:	39 f3                	cmp    %esi,%ebx
 80483ce:	72 f4                	jb     80483c4 <__libc_csu_init+0x20>
 80483d0:	5b                   	pop    %ebx
 80483d1:	5e                   	pop    %esi
 80483d2:	c9                   	leave  
 80483d3:	c3                   	ret    

080483d4 <__libc_csu_fini>:
 80483d4:	55                   	push   %ebp
 80483d5:	89 e5                	mov    %esp,%ebp
 80483d7:	53                   	push   %ebx
 80483d8:	50                   	push   %eax
 80483d9:	b8 90 94 04 08       	mov    $0x8049490,%eax
 80483de:	2d 90 94 04 08       	sub    $0x8049490,%eax
 80483e3:	c1 f8 02             	sar    $0x2,%eax
 80483e6:	85 c0                	test   %eax,%eax
 80483e8:	8d 58 ff             	lea    0xffffffff(%eax),%ebx
 80483eb:	75 0b                	jne    80483f8 <__libc_csu_fini+0x24>
 80483ed:	8b 5d fc             	mov    0xfffffffc(%ebp),%ebx
 80483f0:	c9                   	leave  
 80483f1:	e9 36 00 00 00       	jmp    804842c <_fini>
 80483f6:	89 f6                	mov    %esi,%esi
 80483f8:	ff 14 9d 90 94 04 08 	call   *0x8049490(,%ebx,4)
 80483ff:	89 da                	mov    %ebx,%edx
 8048401:	4b                   	dec    %ebx
 8048402:	85 d2                	test   %edx,%edx
 8048404:	75 f2                	jne    80483f8 <__libc_csu_fini+0x24>
 8048406:	eb e5                	jmp    80483ed <__libc_csu_fini+0x19>

08048408 <__do_global_ctors_aux>:
 8048408:	55                   	push   %ebp
 8048409:	89 e5                	mov    %esp,%ebp
 804840b:	53                   	push   %ebx
 804840c:	52                   	push   %edx
 804840d:	a1 64 95 04 08       	mov    0x8049564,%eax
 8048412:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048415:	bb 64 95 04 08       	mov    $0x8049564,%ebx
 804841a:	74 0c                	je     8048428 <__do_global_ctors_aux+0x20>
 804841c:	83 eb 04             	sub    $0x4,%ebx
 804841f:	ff d0                	call   *%eax
 8048421:	8b 03                	mov    (%ebx),%eax
 8048423:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048426:	75 f4                	jne    804841c <__do_global_ctors_aux+0x14>
 8048428:	58                   	pop    %eax
 8048429:	5b                   	pop    %ebx
 804842a:	c9                   	leave  
 804842b:	c3                   	ret    

hello:     file format elf32-i386

Disassembly of section .rodata:

08048448 <_fp_hw>:
 8048448:	03 00 00 00                                         ....

0804844c <_IO_stdin_used>:
 804844c:	01 00 02 00 68 65 6c 6c 6f 2c 20 43 72 75 65 6c     ....hello, Cruel
 804845c:	20 57 6f 72 6c 64 21 20 0a 00 66 6c 61 67 73 20      World! ..flags 
 804846c:	3d 20 30 78 25 78 20 0a 00 73 69 7a 65 6f 66 20     = 0x%x ..sizeof 
 804847c:	66 6c 61 67 73 20 3d 20 30 78 25 78 20 0a 00        flags = 0x%x ..

hello:     file format elf32-i386

Disassembly of section .data:

08049490 <__data_start>:
 8049490:	00 00                	add    %al,(%eax)
	...

08049494 <__dso_handle>:
 8049494:	00 00 00 00                                         ....

08049498 <p.0>:
 8049498:	70 95 04 08                                         p...

hello:     file format elf32-i386

